filter(course_name == "Foreign Interactions Information for Researchers")
df_remove4 <- df_ienrol %>%
filter(course_name == "ARC DECRA Development Session")
df_remove5 <- df_ienrol %>%
filter(course_name == "NHMRC Investigator Grants Information Session" & event_num == "1")
df_remove_a <- full_join(df_remove1, df_remove2)
df_remove_a <- full_join(df_remove_a, df_remove3)
df_remove_a <- full_join(df_remove_a, df_remove4)
df_remove_a <- full_join(df_remove_a, df_remove5)
df_ienrol <- anti_join (df_ienrol, df_remove_a)
rm(df_remove1, df_remove2, df_remove3, df_remove4, df_remove5, df_remove_a)
# Chunk 6: clean ienrol data
# [breadcrumbs: when I have a chance I should move the preprocessing into a separate script]
df_ienrol <- df_ienrol %>%
select (c(course_name, event_num, first_name, last_name, fan, department, job_status, status))
# turn them into factors
cols <- c("course_name",
"event_num",
"department",
"job_status",
"status")
# recode status and department
df_ienrol <- df_ienrol %>%
dplyr::mutate(across(all_of(cols), ~factor(.))) %>%
dplyr::mutate(attendance_status = case_when (status == "attended" ~ "Attended",
status == "didnotattend" ~ "Did not attend")) %>%
dplyr::mutate(portfolio = case_when (grepl("Research", department) ~ "Portfolio of the Deputy Vice-Chancellor (Research)", #recode RDS as DVC(R)
!grepl("College of", department) ~ "Other portfolios",
department == "Other" ~ "Other",
department == "Unknown" ~ "Other",
TRUE ~ as.factor(as.character(department))))
# summarise the data based on how many courses were held and how many folks attended each of the sessions
n_courses <- df_ienrol %>%
filter(attendance_status == "Attended") %>%
count(course_name, event_num)
# this number will differ from the T&D spreadsheet because we have had attendees that are not in iEnrol
n_attendees_ienrol <- df_ienrol %>%
filter(attendance_status == "Attended") %>%
count(fan, course_name, event_num)
# unique attendees
n_unique_attendees_ienrol <- n_distinct(n_attendees_ienrol$fan)
# all attendees broken down by College
df_portfolios <- df_ienrol %>%
filter (portfolio == "Other portfolios") %>%
count(department) %>%
arrange(-n)
n_portfolios <- unique(df_portfolios$department)
# Attendance status
attended <- df_ienrol %>% filter(attendance_status == "Attended")
not_attended <- df_ienrol %>% filter(attendance_status == "Did not attend")
# Chunk 7: clean spreadsheet data
df_sp <- df_sp %>%
select(c(Theme, `No. attended`, Session)) %>%
dplyr::rename("Attended" = "No. attended")
# this number will differ from the T&D spreadsheet because we have had attendees that are not in iEnrol
n_attended_sp <- sum(df_sp$Attended)
# use these to number the tables & figures
fig_nums(name = "college_attendees",
caption = "Number of Attendees in Training & Development Sessions (2023)")
fig_nums(name = "college_unique_attendees",
caption = "Number of Unique Attendees in Training & Development Sessions (2023)")
table_nums(name = "sessions_by_attendees",
caption = "Training and Development Sessions for 2023'")
#combine sessions & attendees & attendance rate per portfolio
df_grouped <- df_ienrol %>%
count(portfolio, attendance_status) %>%
group_by(portfolio) %>%
mutate(att_pct = (n/sum(n)) *100) %>%
mutate(enrol = sum(n))
# add in the attendance label here & rearrange it so it matches the data (which will be reordered in ggplot)
df_label <- df_grouped %>%
dplyr::mutate(
perc_label = paste0(sprintf("\n\nAttendance rate = %1.1f", att_pct), "%"),
port_perc_label = paste(portfolio, perc_label)) %>%
filter(attendance_status == "Attended") %>%
arrange(n)
#use this to reorder the attendance factor within the ggplot code
attend <- c("Did not attend", "Attended")
# plot it [this has attendance & non-attendance numbers & attendance rates in the names for the portfolios]
ggplot(df_grouped, aes(
x = reorder(portfolio, n),
fill = factor(attendance_status, levels = attend),
y = n
)) +
geom_bar(stat = "identity", colour = "black") +
geom_text(aes(y = n,
x = portfolio,
label = n),
position = position_stack(vjust = 0.5),
size = 6) +
coord_flip() +
labs (title = "Attendance by College and Portfolios (2023)",
x = element_blank(),
y = "Number of enrolments") +
theme_classic() +
theme(
legend.title = element_blank(),
legend.position = c(0.8, 0.2),
title = element_text(size = 14, family="sans"),
legend.text = element_text(size = 14, family="sans"),
axis.text = element_text(size = 14, family ="sans"),
axis.title = element_text(size = 14, family = "sans")
) +
scale_fill_manual(
values = c("#bfbfbf", "#90b8da"),
labels = c("Did not attend", "Attended"),
guide = guide_legend (reverse = TRUE)
) +
scale_x_discrete(
labels = df_label$port_perc_label)
#ggsave(plot = last_plot(),filename = here::here("figures", "2023 attendance rates by portfolio.png"),
#       width = 15, height = 9, dpi = 300)
# count attendees rate per portfolio
df_attend <- df_ienrol %>%
filter(attendance_status == "Attended") %>%
count(portfolio)
# plot it [this has attendance numbers by the portfolios]
ggplot(df_attend, aes(
x = reorder(portfolio, n),
y = n
)) +
geom_bar(stat = "identity", colour = "black", fill = "#90b8da") +
geom_text(aes(y = n,
x = portfolio,
label = n),
position = position_stack(vjust = 0.5),
size = 6) +
coord_flip() +
labs (#title = "Number of Attendees in Training & Development Sessions (2023)", # included in caption
x = element_blank(),
y = "Number of attendees") +
theme_classic() +
theme(
title = element_text(size = 14, family="sans"),
legend.text = element_text(size = 14, family="sans"),
axis.text = element_text(size = 14, family ="sans"),
axis.title = element_text(size = 14, family = "sans")
) +
scale_fill_manual(
values = "#90b8da"
)
# scale_x_discrete(
#   labels = df_label$port_perc_label)
ggsave(plot = last_plot(),filename = here::here("figures", "2023 attendance by portfolio.png"),
width = 15, height = 9, dpi = 300)
# count attendees rate per portfolio
df_attend_unique <- df_ienrol %>%
filter(attendance_status == "Attended") %>%
distinct(fan, attendance_status, portfolio) %>%
count(portfolio)
# plot it [this has unique attendance numbers by the portfolios]
ggplot(df_attend_unique, aes(
x = reorder(portfolio, n),
y = n
)) +
geom_bar(stat = "identity", colour = "black", fill = "#90b8da") +
geom_text(aes(y = n,
x = portfolio,
label = n),
position = position_stack(vjust = 0.5),
size = 6) +
coord_flip() +
labs (#title = "Number of Unique Attendees in Training & Development Sessions (2023)", # included in caption
x = element_blank(),
y = "Number of attendees") +
theme_classic() +
theme(
title = element_text(size = 14, family="sans"),
legend.text = element_text(size = 14, family="sans"),
axis.text = element_text(size = 14, family ="sans"),
axis.title = element_text(size = 14, family = "sans")
) +
scale_fill_manual(
values = "#90b8da"
)
# scale_x_discrete(
#   labels = df_label$port_perc_label)
ggsave(plot = last_plot(),filename = here::here("figures", "2023 unique attendance by portfolio.png"),
width = 15, height = 9, dpi = 300)
#combine sessions & attendees per theme
both <- df_sp %>%
group_by(Theme) %>%
summarise(`Number of Sessions` = n(),
`Number of Attendees` = sum(Attended)) %>%
arrange (desc(`Number of Attendees`)) %>%
adorn_totals("row")
# both <- both %>%
#   adorn_totals("row")
# make it look good
kable(both,
booktabs = T,
align = c('lcc'),
caption = "Training and Development Summary for 2023",
linesep = "\\addlinespace") %>%
kable_styling(latex_options = c("hold_position", "striped"))
# %>%
#   add_footnote("The Final Tally for 2021",
#                notation = "none")
#combine sessions & attendees per theme
theme_overview <- df %>%
group_by(Theme) %>%
summarise(`Number of Sessions` = n(),
`Number of Attendees` = sum(Attended)) %>%
arrange (desc(`Number of Attendees`)) %>%
adorn_totals("row")
#combine sessions & attendees per theme
theme_overview <- df %>%
group_by(Theme) %>%
summarise(`Number of Sessions` = n(),
`Number of Attendees` = sum(Attended)) %>%
arrange (desc(`Number of Attendees`)) %>%
adorn_totals("row")
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE,
include = FALSE,
eval = TRUE)
# Chunk 2: library
library(here)
library(tidyverse)
library(kableExtra)
library(readxl)
library(janitor)
library(rmarkdown)
library(ggrepel) #for annotations in ggplot
# Chunk 3: load training data
df <- read_xlsx(
here::here("data",
"2023_training_data.xlsx"),
sheet = '2023 Program',
skip = 7,
n_max = 99, #last session to date ethics on Dec 1
.name_repair = "unique",
trim_ws = TRUE)
# Chunk 4: clean data
df <- df %>%
select(c(Theme, `No. attended`, Session)) %>%
dplyr::rename("Attended" = "No. attended")
# this number will differ from the T&D spreadsheet because we have had attendees that are not in iEnrol
n_attended <- sum(df$Attended)
# Chunk 5: sessions by theme
# decide whether I want the full data set (df_all) or just the sessions
# we've run to date (df_run)
#df <- df_run
# how many sessions per theme
theme <- df %>%
group_by(Theme) %>%
summarise(`Number of Sessions` = n()) %>%
arrange (desc(`Number of Sessions`))
# make it look good
kable(theme, align = c('l', 'c'))
# Chunk 6: attendees by theme
# how many attendees per theme
attendees <- df %>%
group_by(Theme) %>%
summarise(`Number of Attendees` = sum(Attended)) %>%
arrange (desc(`Number of Attendees`))
# make it look good
kable(attendees, align = c('l', 'c'))
#combine sessions & attendees per theme
theme_overview <- df %>%
group_by(Theme) %>%
summarise(`Number of Sessions` = n(),
`Number of Attendees` = sum(Attended)) %>%
arrange (desc(`Number of Attendees`)) %>%
adorn_totals("row")
# both <- both %>%
#   adorn_totals("row")
# make it look good
kable(theme_overview,
booktabs = T,
align = c('lcc'),
caption =
sprintf("Training and Development Summary for 2023 (n = %d)",
n_attended),
linesep = "\\addlinespace") %>%
kable_styling(latex_options = c("hold_position", "striped"))
# %>%
#   add_footnote("The Final Tally for 2021",
#                notation = "none")
#combine sessions & attendees per theme
theme_overview <- df %>%
group_by(Theme) %>%
summarise(`Number of Sessions` = n(),
`Number of Attendees` = sum(Attended)) %>%
arrange (desc(`Number of Attendees`)) %>%
adorn_totals("row")
# how many sessions per theme
theme_sessions <- df_sp %>%
group_by(Theme) %>%
select(c(Theme, Session, Attended)) %>%
arrange(Theme) %>%
mutate(Theme = as.factor(Theme))
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE,
include = FALSE,
eval = TRUE)
# Chunk 2: library
library(here)
library(tidyverse)
library(kableExtra)
library(readxl)
library(janitor)
library(rmarkdown)
library(ggrepel) #for annotations in ggplot
library(captioner)
# Chunk 3: functions
styler_pdf <- function(dat) {
dat %>%
kable_styling(full_width = F,
latex_options = c("striped", "HOLD_position"))
}
table_nums <- captioner(prefix = "Table")
fig_nums <- captioner(prefix = "Figure")
# Chunk 4: load training data
# load data from training spreadsheet (this is the complete number of attendees
# & includes info about the theme)
df_sp <- read_xlsx(
here::here("data",
"2023_training_data.xlsx"),
sheet = '2023 Program',
skip = 7,
n_max = 102,  #last session Cruxes on Dec 12
.name_repair = "unique",
trim_ws = TRUE)
# load data from ienrol (this contains names of Flinders attendees & includes college/portfolio info)
df_ienrol <- read_csv(here::here("data", "2023_ienrol_data.csv"), lazy = FALSE) %>%
clean_names()
# Chunk 5: delete sessions that did not run
# delete the sessions that were scheduled but not run [will need to compare to our training spreadsheet]
# use the n_courses code in the next chunk to make it easy to figure out which sessions didn't run
df_remove1 <- df_ienrol %>%
filter(course_name == "Open Research Practices" & event_num == "2")
df_remove2 <- df_ienrol %>%
filter(course_name == "The Strategic Researcher")
df_remove3 <- df_ienrol %>%
filter(course_name == "Foreign Interactions Information for Researchers")
df_remove4 <- df_ienrol %>%
filter(course_name == "ARC DECRA Development Session")
df_remove5 <- df_ienrol %>%
filter(course_name == "NHMRC Investigator Grants Information Session" & event_num == "1")
df_remove_a <- full_join(df_remove1, df_remove2)
df_remove_a <- full_join(df_remove_a, df_remove3)
df_remove_a <- full_join(df_remove_a, df_remove4)
df_remove_a <- full_join(df_remove_a, df_remove5)
df_ienrol <- anti_join (df_ienrol, df_remove_a)
rm(df_remove1, df_remove2, df_remove3, df_remove4, df_remove5, df_remove_a)
# Chunk 6: clean ienrol data
# [breadcrumbs: when I have a chance I should move the preprocessing into a separate script]
df_ienrol <- df_ienrol %>%
select (c(course_name, event_num, first_name, last_name, fan, department, job_status, status))
# turn them into factors
cols <- c("course_name",
"event_num",
"department",
"job_status",
"status")
# recode status and department
df_ienrol <- df_ienrol %>%
dplyr::mutate(across(all_of(cols), ~factor(.))) %>%
dplyr::mutate(attendance_status = case_when (status == "attended" ~ "Attended",
status == "didnotattend" ~ "Did not attend")) %>%
dplyr::mutate(portfolio = case_when (grepl("Research", department) ~ "Portfolio of the Deputy Vice-Chancellor (Research)", #recode RDS as DVC(R)
!grepl("College of", department) ~ "Other portfolios",
department == "Other" ~ "Other",
department == "Unknown" ~ "Other",
TRUE ~ as.factor(as.character(department))))
# summarise the data based on how many courses were held and how many folks attended each of the sessions
n_courses <- df_ienrol %>%
filter(attendance_status == "Attended") %>%
count(course_name, event_num)
# this number will differ from the T&D spreadsheet because we have had attendees that are not in iEnrol
n_attendees_ienrol <- df_ienrol %>%
filter(attendance_status == "Attended") %>%
count(fan, course_name, event_num)
# unique attendees
n_unique_attendees_ienrol <- n_distinct(n_attendees_ienrol$fan)
# all attendees broken down by College
df_portfolios <- df_ienrol %>%
filter (portfolio == "Other portfolios") %>%
count(department) %>%
arrange(-n)
n_portfolios <- unique(df_portfolios$department)
# Attendance status
attended <- df_ienrol %>% filter(attendance_status == "Attended")
not_attended <- df_ienrol %>% filter(attendance_status == "Did not attend")
# Chunk 7: clean spreadsheet data
df_sp <- df_sp %>%
select(c(Theme, `No. attended`, Session)) %>%
dplyr::rename("Attended" = "No. attended")
# this number will differ from the T&D spreadsheet because we have had attendees that are not in iEnrol
n_attended_sp <- sum(df_sp$Attended)
# Chunk 8: captions
# use these to provide the captions and numbers for the figures
# use kable captions to provide the captions for the Tables, but use the captioner package
# to be able to reference the tables within the text
fig_nums(name = "college_attendees",
caption = "Number of Attendees in Training & Development Sessions (2023)")
fig_nums(name = "college_unique_attendees",
caption = "Number of Unique Attendees in Training & Development Sessions (2023)")
table_nums(name = "theme_overview",
caption = "Training and Development Summary for 2023")
table_nums(name = "sessions_by_theme",
caption = "Training and Development Sessions by Theme for 2023")
# Chunk 10: plot the ienrol attendance
# count attendees rate per portfolio
df_attend <- df_ienrol %>%
filter(attendance_status == "Attended") %>%
count(portfolio)
# plot it [this has attendance numbers by the portfolios]
ggplot(df_attend, aes(
x = reorder(portfolio, n),
y = n
)) +
geom_bar(stat = "identity", colour = "black", fill = "#90b8da") +
geom_text(aes(y = n,
x = portfolio,
label = n),
position = position_stack(vjust = 0.5),
size = 6) +
coord_flip() +
labs (#title = "Number of Attendees in Training & Development Sessions (2023)", # included in caption
x = element_blank(),
y = "Number of attendees") +
theme_classic() +
theme(
title = element_text(size = 14, family="sans"),
legend.text = element_text(size = 14, family="sans"),
axis.text = element_text(size = 14, family ="sans"),
axis.title = element_text(size = 14, family = "sans")
) +
scale_fill_manual(
values = "#90b8da"
)
# scale_x_discrete(
#   labels = df_label$port_perc_label)
ggsave(plot = last_plot(),filename = here::here("figures", "2023 attendance by portfolio.png"),
width = 15, height = 9, dpi = 300)
# Chunk 11: plot the ienrol attendance for unique attendees
# count attendees rate per portfolio
df_attend_unique <- df_ienrol %>%
filter(attendance_status == "Attended") %>%
distinct(fan, attendance_status, portfolio) %>%
count(portfolio)
# plot it [this has unique attendance numbers by the portfolios]
ggplot(df_attend_unique, aes(
x = reorder(portfolio, n),
y = n
)) +
geom_bar(stat = "identity", colour = "black", fill = "#90b8da") +
geom_text(aes(y = n,
x = portfolio,
label = n),
position = position_stack(vjust = 0.5),
size = 6) +
coord_flip() +
labs (#title = "Number of Unique Attendees in Training & Development Sessions (2023)", # included in caption
x = element_blank(),
y = "Number of attendees") +
theme_classic() +
theme(
title = element_text(size = 14, family="sans"),
legend.text = element_text(size = 14, family="sans"),
axis.text = element_text(size = 14, family ="sans"),
axis.title = element_text(size = 14, family = "sans")
) +
scale_fill_manual(
values = "#90b8da"
)
# scale_x_discrete(
#   labels = df_label$port_perc_label)
ggsave(plot = last_plot(),filename = here::here("figures", "2023 unique attendance by portfolio.png"),
width = 15, height = 9, dpi = 300)
# Chunk 12: sessions and attendees by theme
#combine sessions & attendees per theme
theme_overview <- df_sp %>%
group_by(Theme) %>%
summarise(`Number of Sessions` = n(),
`Number of Attendees` = sum(Attended)) %>%
arrange (desc(`Number of Attendees`)) %>%
adorn_totals("row")
# make it look good
kable(theme_overview,
booktabs = T,
align = c('lcc'),
caption = "Training and Development Summary for 2023",
linesep = "\\addlinespace") %>%
kable_styling(latex_options = c("hold_position", "striped"))
# how many sessions per theme
theme_sessions <- df_sp %>%
group_by(Theme) %>%
select(c(Theme, Session, Attended)) %>%
arrange(Theme) %>%
mutate(Theme = as.factor(Theme))
# make it look good
kable(theme_sessions [, 2:3],
booktabs = T,
linesep = "\\addlinespace",
col.names = c("Sessions by Themes", "Number of Attendees"),
caption =
sprintf("Training and Development sessions for 2023 (n = %d)",
n_attended),
align = 'lc',
longtable = T #break the table over multiple pages
) %>%
column_spec(1, width = "5in") %>%
column_spec(2, width = "1in") %>%
pack_rows (index = table(theme_sessions$Theme),
latex_gap_space = "0.4em",) %>%
kable_styling(
full_width = F,
latex_options = c("repeat_header", "hold_position", "striped")
)
